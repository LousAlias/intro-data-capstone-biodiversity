Completed Code in the Learning Environment:By Laura StevensBiodiversity  Capstone Project: May 2018.import codecademylibimport pandas as pdfrom matplotlib import pyplot as plt#analyzing species conservation statusspecies = pd.read_csv('species_info.csv')print(species.head())#About the data in species data frame#Number of unique speciesspecies_count = species.scientific_name.nunique()print(species_count)#Types of species: species_type = species.category.unique()print(species_type)#Types of conservation status:conservation_statuses = species.conservation_status.unique()print(conservation_statuses)	#Question 1: How many species are in each conservation category?conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()print(conservation_counts)#accounting for null values in conservation statusspecies.fillna('No Intervention', inplace = True)conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()print(conservation_counts_fixed)#Sort columns based on number of species in each categoryprotection_counts = species.groupby('conservation_status')\ 	   .scientific_name.nunique().reset_index()\	    .sort_values(by='scientific_name') print(protection_counts)#Creating Bar Graph    plt.figure(figsize=(10, 4))ax = plt.subplot()plt.bar(range(len(protection_counts)),protection_counts.scientific_name.values, color = "green")ax.set_xticks(range(len(protection_counts)))ax.set_xticklabels(protection_counts.conservation_status.values)plt.xlabel('Conservation Status', fontsize =12)plt.ylabel('Number of Species', fontsize =12)plt.title('Conservation Status by Species', fontsize =16)plt.show()#Question 2: Are certain types of species more likely to be endangered?species['is_protected'] = species.conservation_status != 'No Intervention'category_counts = species.groupby(['category', 'is_protected']).scientific_name.count().reset_index()print(category_counts.head())#pivot tablecategory_pivot = category_counts.pivot(columns = 'is_protected', index = 'category', values = 'scientific_name'). reset_index()print(category_pivot.head())#renaming columns names on category_pivotcategory_pivot.columns= ['category', 'not_protected', 'protected']total_number = category_pivot.protected + category_pivot.not_protected#adding a column that calculates the percent protectedcategory_pivot['percent_protected'] = (category_pivot.protected / total_number)*100print(category_pivot.head())#Are mammals more likely to be endangered than birds?#To run chi-squared testsfrom scipy.stats import chi2_contingency#Mammal-bird contingency tablecontingency = [[30, 146],              [75, 413]]chi2, pval, dof, expected = chi2_contingency(contingency)print pval#p-value = 0.68759É therefore the difference between mammals and birds is just a coincidence. #Is there a difference between retiles and mammals?reptile_mammal_table = [[5, 73],                       	[30, 146]]chi2, pval_reptile_mammal, dof, expected = chi2_contingency(reptile_mammal_table)print pval_reptile_mammal#p-value = 0.038356... or <0.05 therefore there is a difference between reptiles and mammals#Working with the observations dataframeobservations = pd.read_csv('observations.csv')print(observations.head())#In Search of Sheepspecies['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)#selecting row with the word sheepspecies_is_sheep = species[species.is_sheep]#Selecting rows for actual sheep, not plantssheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]#merging observations and sheep species tablesheep_observations = observations.merge(sheep_species)print sheep_observations.head() #total number of sheep sightings across all 3 sheep species in each parKobs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()print obs_by_park#plotting sheep sightingsplt.figure(figsize = (16, 4))ax=plt.subplot()plt.bar(range(len(obs_by_park.park_name)), obs_by_park.observations, color ='green') ax.set_xticks(range(len(obs_by_park.park_name)))ax.set_xticklabels(obs_by_park.park_name)plt.xlabel('National Park', fontsize =12)plt.ylabel('Number of Observations', fontsize =12)plt.title('Observations of Sheep per Week', fontsize =16)plt.savefig('Sheep_observation.jpg')plt.show()#Foot and Mouth Reduction Effort - sample size determination:baseline = 0.15minimum_detectable_effect = 100*((0.2-0.15) / 0.15)print minimum_detectable_effectsample_size_per_variant = 890#how many weeks in Yellowstone to observe enough sheep?yellowstone_weeks_observing = 890 / 507.0print yellowstone_weeks_observing#it will take roughly 2 weeks of observing in Yellowstone#How many weeks in Bryce to observe enough sheep?bryce_weeks_observing = 890 / 250.0print bryce_weeks_observing#it will take approximately 4 weeks in Bryce for observations.  